// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/erikqwerty/auth/internal/repository.UserCache -o user_cache_minimock.go -n UserCacheMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/erikqwerty/auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserCacheMock implements mm_repository.UserCache
type UserCacheMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetUser          func(ctx context.Context, email string) (up1 *model.UserInfo, err error)
	funcGetUserOrigin    string
	inspectFuncGetUser   func(ctx context.Context, email string)
	afterGetUserCounter  uint64
	beforeGetUserCounter uint64
	GetUserMock          mUserCacheMockGetUser

	funcSetUser          func(ctx context.Context, email string, user *model.UserInfo) (err error)
	funcSetUserOrigin    string
	inspectFuncSetUser   func(ctx context.Context, email string, user *model.UserInfo)
	afterSetUserCounter  uint64
	beforeSetUserCounter uint64
	SetUserMock          mUserCacheMockSetUser
}

// NewUserCacheMock returns a mock for mm_repository.UserCache
func NewUserCacheMock(t minimock.Tester) *UserCacheMock {
	m := &UserCacheMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetUserMock = mUserCacheMockGetUser{mock: m}
	m.GetUserMock.callArgs = []*UserCacheMockGetUserParams{}

	m.SetUserMock = mUserCacheMockSetUser{mock: m}
	m.SetUserMock.callArgs = []*UserCacheMockSetUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserCacheMockGetUser struct {
	optional           bool
	mock               *UserCacheMock
	defaultExpectation *UserCacheMockGetUserExpectation
	expectations       []*UserCacheMockGetUserExpectation

	callArgs []*UserCacheMockGetUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserCacheMockGetUserExpectation specifies expectation struct of the UserCache.GetUser
type UserCacheMockGetUserExpectation struct {
	mock               *UserCacheMock
	params             *UserCacheMockGetUserParams
	paramPtrs          *UserCacheMockGetUserParamPtrs
	expectationOrigins UserCacheMockGetUserExpectationOrigins
	results            *UserCacheMockGetUserResults
	returnOrigin       string
	Counter            uint64
}

// UserCacheMockGetUserParams contains parameters of the UserCache.GetUser
type UserCacheMockGetUserParams struct {
	ctx   context.Context
	email string
}

// UserCacheMockGetUserParamPtrs contains pointers to parameters of the UserCache.GetUser
type UserCacheMockGetUserParamPtrs struct {
	ctx   *context.Context
	email *string
}

// UserCacheMockGetUserResults contains results of the UserCache.GetUser
type UserCacheMockGetUserResults struct {
	up1 *model.UserInfo
	err error
}

// UserCacheMockGetUserOrigins contains origins of expectations of the UserCache.GetUser
type UserCacheMockGetUserExpectationOrigins struct {
	origin      string
	originCtx   string
	originEmail string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUser *mUserCacheMockGetUser) Optional() *mUserCacheMockGetUser {
	mmGetUser.optional = true
	return mmGetUser
}

// Expect sets up expected params for UserCache.GetUser
func (mmGetUser *mUserCacheMockGetUser) Expect(ctx context.Context, email string) *mUserCacheMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserCacheMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.paramPtrs != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by ExpectParams functions")
	}

	mmGetUser.defaultExpectation.params = &UserCacheMockGetUserParams{ctx, email}
	mmGetUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetUser.expectations {
		if minimock.Equal(e.params, mmGetUser.defaultExpectation.params) {
			mmGetUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUser.defaultExpectation.params)
		}
	}

	return mmGetUser
}

// ExpectCtxParam1 sets up expected param ctx for UserCache.GetUser
func (mmGetUser *mUserCacheMockGetUser) ExpectCtxParam1(ctx context.Context) *mUserCacheMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserCacheMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserCacheMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetUser
}

// ExpectEmailParam2 sets up expected param email for UserCache.GetUser
func (mmGetUser *mUserCacheMockGetUser) ExpectEmailParam2(email string) *mUserCacheMockGetUser {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserCacheMockGetUserExpectation{}
	}

	if mmGetUser.defaultExpectation.params != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Expect")
	}

	if mmGetUser.defaultExpectation.paramPtrs == nil {
		mmGetUser.defaultExpectation.paramPtrs = &UserCacheMockGetUserParamPtrs{}
	}
	mmGetUser.defaultExpectation.paramPtrs.email = &email
	mmGetUser.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmGetUser
}

// Inspect accepts an inspector function that has same arguments as the UserCache.GetUser
func (mmGetUser *mUserCacheMockGetUser) Inspect(f func(ctx context.Context, email string)) *mUserCacheMockGetUser {
	if mmGetUser.mock.inspectFuncGetUser != nil {
		mmGetUser.mock.t.Fatalf("Inspect function is already set for UserCacheMock.GetUser")
	}

	mmGetUser.mock.inspectFuncGetUser = f

	return mmGetUser
}

// Return sets up results that will be returned by UserCache.GetUser
func (mmGetUser *mUserCacheMockGetUser) Return(up1 *model.UserInfo, err error) *UserCacheMock {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Set")
	}

	if mmGetUser.defaultExpectation == nil {
		mmGetUser.defaultExpectation = &UserCacheMockGetUserExpectation{mock: mmGetUser.mock}
	}
	mmGetUser.defaultExpectation.results = &UserCacheMockGetUserResults{up1, err}
	mmGetUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetUser.mock
}

// Set uses given function f to mock the UserCache.GetUser method
func (mmGetUser *mUserCacheMockGetUser) Set(f func(ctx context.Context, email string) (up1 *model.UserInfo, err error)) *UserCacheMock {
	if mmGetUser.defaultExpectation != nil {
		mmGetUser.mock.t.Fatalf("Default expectation is already set for the UserCache.GetUser method")
	}

	if len(mmGetUser.expectations) > 0 {
		mmGetUser.mock.t.Fatalf("Some expectations are already set for the UserCache.GetUser method")
	}

	mmGetUser.mock.funcGetUser = f
	mmGetUser.mock.funcGetUserOrigin = minimock.CallerInfo(1)
	return mmGetUser.mock
}

// When sets expectation for the UserCache.GetUser which will trigger the result defined by the following
// Then helper
func (mmGetUser *mUserCacheMockGetUser) When(ctx context.Context, email string) *UserCacheMockGetUserExpectation {
	if mmGetUser.mock.funcGetUser != nil {
		mmGetUser.mock.t.Fatalf("UserCacheMock.GetUser mock is already set by Set")
	}

	expectation := &UserCacheMockGetUserExpectation{
		mock:               mmGetUser.mock,
		params:             &UserCacheMockGetUserParams{ctx, email},
		expectationOrigins: UserCacheMockGetUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetUser.expectations = append(mmGetUser.expectations, expectation)
	return expectation
}

// Then sets up UserCache.GetUser return parameters for the expectation previously defined by the When method
func (e *UserCacheMockGetUserExpectation) Then(up1 *model.UserInfo, err error) *UserCacheMock {
	e.results = &UserCacheMockGetUserResults{up1, err}
	return e.mock
}

// Times sets number of times UserCache.GetUser should be invoked
func (mmGetUser *mUserCacheMockGetUser) Times(n uint64) *mUserCacheMockGetUser {
	if n == 0 {
		mmGetUser.mock.t.Fatalf("Times of UserCacheMock.GetUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUser.expectedInvocations, n)
	mmGetUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetUser
}

func (mmGetUser *mUserCacheMockGetUser) invocationsDone() bool {
	if len(mmGetUser.expectations) == 0 && mmGetUser.defaultExpectation == nil && mmGetUser.mock.funcGetUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUser.mock.afterGetUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUser implements mm_repository.UserCache
func (mmGetUser *UserCacheMock) GetUser(ctx context.Context, email string) (up1 *model.UserInfo, err error) {
	mm_atomic.AddUint64(&mmGetUser.beforeGetUserCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUser.afterGetUserCounter, 1)

	mmGetUser.t.Helper()

	if mmGetUser.inspectFuncGetUser != nil {
		mmGetUser.inspectFuncGetUser(ctx, email)
	}

	mm_params := UserCacheMockGetUserParams{ctx, email}

	// Record call args
	mmGetUser.GetUserMock.mutex.Lock()
	mmGetUser.GetUserMock.callArgs = append(mmGetUser.GetUserMock.callArgs, &mm_params)
	mmGetUser.GetUserMock.mutex.Unlock()

	for _, e := range mmGetUser.GetUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUser.GetUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUser.GetUserMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUser.GetUserMock.defaultExpectation.params
		mm_want_ptrs := mmGetUser.GetUserMock.defaultExpectation.paramPtrs

		mm_got := UserCacheMockGetUserParams{ctx, email}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUser.t.Errorf("UserCacheMock.GetUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmGetUser.t.Errorf("UserCacheMock.GetUser got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUser.t.Errorf("UserCacheMock.GetUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetUser.GetUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUser.GetUserMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUser.t.Fatal("No results are set for the UserCacheMock.GetUser")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUser.funcGetUser != nil {
		return mmGetUser.funcGetUser(ctx, email)
	}
	mmGetUser.t.Fatalf("Unexpected call to UserCacheMock.GetUser. %v %v", ctx, email)
	return
}

// GetUserAfterCounter returns a count of finished UserCacheMock.GetUser invocations
func (mmGetUser *UserCacheMock) GetUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.afterGetUserCounter)
}

// GetUserBeforeCounter returns a count of UserCacheMock.GetUser invocations
func (mmGetUser *UserCacheMock) GetUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUser.beforeGetUserCounter)
}

// Calls returns a list of arguments used in each call to UserCacheMock.GetUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUser *mUserCacheMockGetUser) Calls() []*UserCacheMockGetUserParams {
	mmGetUser.mutex.RLock()

	argCopy := make([]*UserCacheMockGetUserParams, len(mmGetUser.callArgs))
	copy(argCopy, mmGetUser.callArgs)

	mmGetUser.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserDone returns true if the count of the GetUser invocations corresponds
// the number of defined expectations
func (m *UserCacheMock) MinimockGetUserDone() bool {
	if m.GetUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserMock.invocationsDone()
}

// MinimockGetUserInspect logs each unmet expectation
func (m *UserCacheMock) MinimockGetUserInspect() {
	for _, e := range m.GetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheMock.GetUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetUserCounter := mm_atomic.LoadUint64(&m.afterGetUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserMock.defaultExpectation != nil && afterGetUserCounter < 1 {
		if m.GetUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserCacheMock.GetUser at\n%s", m.GetUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserCacheMock.GetUser at\n%s with params: %#v", m.GetUserMock.defaultExpectation.expectationOrigins.origin, *m.GetUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUser != nil && afterGetUserCounter < 1 {
		m.t.Errorf("Expected call to UserCacheMock.GetUser at\n%s", m.funcGetUserOrigin)
	}

	if !m.GetUserMock.invocationsDone() && afterGetUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheMock.GetUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserMock.expectedInvocations), m.GetUserMock.expectedInvocationsOrigin, afterGetUserCounter)
	}
}

type mUserCacheMockSetUser struct {
	optional           bool
	mock               *UserCacheMock
	defaultExpectation *UserCacheMockSetUserExpectation
	expectations       []*UserCacheMockSetUserExpectation

	callArgs []*UserCacheMockSetUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserCacheMockSetUserExpectation specifies expectation struct of the UserCache.SetUser
type UserCacheMockSetUserExpectation struct {
	mock               *UserCacheMock
	params             *UserCacheMockSetUserParams
	paramPtrs          *UserCacheMockSetUserParamPtrs
	expectationOrigins UserCacheMockSetUserExpectationOrigins
	results            *UserCacheMockSetUserResults
	returnOrigin       string
	Counter            uint64
}

// UserCacheMockSetUserParams contains parameters of the UserCache.SetUser
type UserCacheMockSetUserParams struct {
	ctx   context.Context
	email string
	user  *model.UserInfo
}

// UserCacheMockSetUserParamPtrs contains pointers to parameters of the UserCache.SetUser
type UserCacheMockSetUserParamPtrs struct {
	ctx   *context.Context
	email *string
	user  **model.UserInfo
}

// UserCacheMockSetUserResults contains results of the UserCache.SetUser
type UserCacheMockSetUserResults struct {
	err error
}

// UserCacheMockSetUserOrigins contains origins of expectations of the UserCache.SetUser
type UserCacheMockSetUserExpectationOrigins struct {
	origin      string
	originCtx   string
	originEmail string
	originUser  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSetUser *mUserCacheMockSetUser) Optional() *mUserCacheMockSetUser {
	mmSetUser.optional = true
	return mmSetUser
}

// Expect sets up expected params for UserCache.SetUser
func (mmSetUser *mUserCacheMockSetUser) Expect(ctx context.Context, email string, user *model.UserInfo) *mUserCacheMockSetUser {
	if mmSetUser.mock.funcSetUser != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Set")
	}

	if mmSetUser.defaultExpectation == nil {
		mmSetUser.defaultExpectation = &UserCacheMockSetUserExpectation{}
	}

	if mmSetUser.defaultExpectation.paramPtrs != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by ExpectParams functions")
	}

	mmSetUser.defaultExpectation.params = &UserCacheMockSetUserParams{ctx, email, user}
	mmSetUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSetUser.expectations {
		if minimock.Equal(e.params, mmSetUser.defaultExpectation.params) {
			mmSetUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetUser.defaultExpectation.params)
		}
	}

	return mmSetUser
}

// ExpectCtxParam1 sets up expected param ctx for UserCache.SetUser
func (mmSetUser *mUserCacheMockSetUser) ExpectCtxParam1(ctx context.Context) *mUserCacheMockSetUser {
	if mmSetUser.mock.funcSetUser != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Set")
	}

	if mmSetUser.defaultExpectation == nil {
		mmSetUser.defaultExpectation = &UserCacheMockSetUserExpectation{}
	}

	if mmSetUser.defaultExpectation.params != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Expect")
	}

	if mmSetUser.defaultExpectation.paramPtrs == nil {
		mmSetUser.defaultExpectation.paramPtrs = &UserCacheMockSetUserParamPtrs{}
	}
	mmSetUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmSetUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSetUser
}

// ExpectEmailParam2 sets up expected param email for UserCache.SetUser
func (mmSetUser *mUserCacheMockSetUser) ExpectEmailParam2(email string) *mUserCacheMockSetUser {
	if mmSetUser.mock.funcSetUser != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Set")
	}

	if mmSetUser.defaultExpectation == nil {
		mmSetUser.defaultExpectation = &UserCacheMockSetUserExpectation{}
	}

	if mmSetUser.defaultExpectation.params != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Expect")
	}

	if mmSetUser.defaultExpectation.paramPtrs == nil {
		mmSetUser.defaultExpectation.paramPtrs = &UserCacheMockSetUserParamPtrs{}
	}
	mmSetUser.defaultExpectation.paramPtrs.email = &email
	mmSetUser.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmSetUser
}

// ExpectUserParam3 sets up expected param user for UserCache.SetUser
func (mmSetUser *mUserCacheMockSetUser) ExpectUserParam3(user *model.UserInfo) *mUserCacheMockSetUser {
	if mmSetUser.mock.funcSetUser != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Set")
	}

	if mmSetUser.defaultExpectation == nil {
		mmSetUser.defaultExpectation = &UserCacheMockSetUserExpectation{}
	}

	if mmSetUser.defaultExpectation.params != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Expect")
	}

	if mmSetUser.defaultExpectation.paramPtrs == nil {
		mmSetUser.defaultExpectation.paramPtrs = &UserCacheMockSetUserParamPtrs{}
	}
	mmSetUser.defaultExpectation.paramPtrs.user = &user
	mmSetUser.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmSetUser
}

// Inspect accepts an inspector function that has same arguments as the UserCache.SetUser
func (mmSetUser *mUserCacheMockSetUser) Inspect(f func(ctx context.Context, email string, user *model.UserInfo)) *mUserCacheMockSetUser {
	if mmSetUser.mock.inspectFuncSetUser != nil {
		mmSetUser.mock.t.Fatalf("Inspect function is already set for UserCacheMock.SetUser")
	}

	mmSetUser.mock.inspectFuncSetUser = f

	return mmSetUser
}

// Return sets up results that will be returned by UserCache.SetUser
func (mmSetUser *mUserCacheMockSetUser) Return(err error) *UserCacheMock {
	if mmSetUser.mock.funcSetUser != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Set")
	}

	if mmSetUser.defaultExpectation == nil {
		mmSetUser.defaultExpectation = &UserCacheMockSetUserExpectation{mock: mmSetUser.mock}
	}
	mmSetUser.defaultExpectation.results = &UserCacheMockSetUserResults{err}
	mmSetUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSetUser.mock
}

// Set uses given function f to mock the UserCache.SetUser method
func (mmSetUser *mUserCacheMockSetUser) Set(f func(ctx context.Context, email string, user *model.UserInfo) (err error)) *UserCacheMock {
	if mmSetUser.defaultExpectation != nil {
		mmSetUser.mock.t.Fatalf("Default expectation is already set for the UserCache.SetUser method")
	}

	if len(mmSetUser.expectations) > 0 {
		mmSetUser.mock.t.Fatalf("Some expectations are already set for the UserCache.SetUser method")
	}

	mmSetUser.mock.funcSetUser = f
	mmSetUser.mock.funcSetUserOrigin = minimock.CallerInfo(1)
	return mmSetUser.mock
}

// When sets expectation for the UserCache.SetUser which will trigger the result defined by the following
// Then helper
func (mmSetUser *mUserCacheMockSetUser) When(ctx context.Context, email string, user *model.UserInfo) *UserCacheMockSetUserExpectation {
	if mmSetUser.mock.funcSetUser != nil {
		mmSetUser.mock.t.Fatalf("UserCacheMock.SetUser mock is already set by Set")
	}

	expectation := &UserCacheMockSetUserExpectation{
		mock:               mmSetUser.mock,
		params:             &UserCacheMockSetUserParams{ctx, email, user},
		expectationOrigins: UserCacheMockSetUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSetUser.expectations = append(mmSetUser.expectations, expectation)
	return expectation
}

// Then sets up UserCache.SetUser return parameters for the expectation previously defined by the When method
func (e *UserCacheMockSetUserExpectation) Then(err error) *UserCacheMock {
	e.results = &UserCacheMockSetUserResults{err}
	return e.mock
}

// Times sets number of times UserCache.SetUser should be invoked
func (mmSetUser *mUserCacheMockSetUser) Times(n uint64) *mUserCacheMockSetUser {
	if n == 0 {
		mmSetUser.mock.t.Fatalf("Times of UserCacheMock.SetUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSetUser.expectedInvocations, n)
	mmSetUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSetUser
}

func (mmSetUser *mUserCacheMockSetUser) invocationsDone() bool {
	if len(mmSetUser.expectations) == 0 && mmSetUser.defaultExpectation == nil && mmSetUser.mock.funcSetUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSetUser.mock.afterSetUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSetUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SetUser implements mm_repository.UserCache
func (mmSetUser *UserCacheMock) SetUser(ctx context.Context, email string, user *model.UserInfo) (err error) {
	mm_atomic.AddUint64(&mmSetUser.beforeSetUserCounter, 1)
	defer mm_atomic.AddUint64(&mmSetUser.afterSetUserCounter, 1)

	mmSetUser.t.Helper()

	if mmSetUser.inspectFuncSetUser != nil {
		mmSetUser.inspectFuncSetUser(ctx, email, user)
	}

	mm_params := UserCacheMockSetUserParams{ctx, email, user}

	// Record call args
	mmSetUser.SetUserMock.mutex.Lock()
	mmSetUser.SetUserMock.callArgs = append(mmSetUser.SetUserMock.callArgs, &mm_params)
	mmSetUser.SetUserMock.mutex.Unlock()

	for _, e := range mmSetUser.SetUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetUser.SetUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetUser.SetUserMock.defaultExpectation.Counter, 1)
		mm_want := mmSetUser.SetUserMock.defaultExpectation.params
		mm_want_ptrs := mmSetUser.SetUserMock.defaultExpectation.paramPtrs

		mm_got := UserCacheMockSetUserParams{ctx, email, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSetUser.t.Errorf("UserCacheMock.SetUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetUser.SetUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmSetUser.t.Errorf("UserCacheMock.SetUser got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetUser.SetUserMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmSetUser.t.Errorf("UserCacheMock.SetUser got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetUser.SetUserMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetUser.t.Errorf("UserCacheMock.SetUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSetUser.SetUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetUser.SetUserMock.defaultExpectation.results
		if mm_results == nil {
			mmSetUser.t.Fatal("No results are set for the UserCacheMock.SetUser")
		}
		return (*mm_results).err
	}
	if mmSetUser.funcSetUser != nil {
		return mmSetUser.funcSetUser(ctx, email, user)
	}
	mmSetUser.t.Fatalf("Unexpected call to UserCacheMock.SetUser. %v %v %v", ctx, email, user)
	return
}

// SetUserAfterCounter returns a count of finished UserCacheMock.SetUser invocations
func (mmSetUser *UserCacheMock) SetUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetUser.afterSetUserCounter)
}

// SetUserBeforeCounter returns a count of UserCacheMock.SetUser invocations
func (mmSetUser *UserCacheMock) SetUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetUser.beforeSetUserCounter)
}

// Calls returns a list of arguments used in each call to UserCacheMock.SetUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetUser *mUserCacheMockSetUser) Calls() []*UserCacheMockSetUserParams {
	mmSetUser.mutex.RLock()

	argCopy := make([]*UserCacheMockSetUserParams, len(mmSetUser.callArgs))
	copy(argCopy, mmSetUser.callArgs)

	mmSetUser.mutex.RUnlock()

	return argCopy
}

// MinimockSetUserDone returns true if the count of the SetUser invocations corresponds
// the number of defined expectations
func (m *UserCacheMock) MinimockSetUserDone() bool {
	if m.SetUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetUserMock.invocationsDone()
}

// MinimockSetUserInspect logs each unmet expectation
func (m *UserCacheMock) MinimockSetUserInspect() {
	for _, e := range m.SetUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheMock.SetUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetUserCounter := mm_atomic.LoadUint64(&m.afterSetUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetUserMock.defaultExpectation != nil && afterSetUserCounter < 1 {
		if m.SetUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserCacheMock.SetUser at\n%s", m.SetUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserCacheMock.SetUser at\n%s with params: %#v", m.SetUserMock.defaultExpectation.expectationOrigins.origin, *m.SetUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetUser != nil && afterSetUserCounter < 1 {
		m.t.Errorf("Expected call to UserCacheMock.SetUser at\n%s", m.funcSetUserOrigin)
	}

	if !m.SetUserMock.invocationsDone() && afterSetUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheMock.SetUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetUserMock.expectedInvocations), m.SetUserMock.expectedInvocationsOrigin, afterSetUserCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCacheMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetUserInspect()

			m.MinimockSetUserInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetUserDone() &&
		m.MinimockSetUserDone()
}
