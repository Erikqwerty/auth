// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/erikqwerty/auth/internal/repository.RepoLoger -o repo_loger_minimock.go -n RepoLogerMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"

	"github.com/erikqwerty/auth/internal/model"
)

// RepoLogerMock implements mm_repository.RepoLoger
type RepoLogerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateLog          func(ctx context.Context, log *model.Log) (err error)
	funcCreateLogOrigin    string
	inspectFuncCreateLog   func(ctx context.Context, log *model.Log)
	afterCreateLogCounter  uint64
	beforeCreateLogCounter uint64
	CreateLogMock          mRepoLogerMockCreateLog
}

// NewRepoLogerMock returns a mock for mm_repository.RepoLoger
func NewRepoLogerMock(t minimock.Tester) *RepoLogerMock {
	m := &RepoLogerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateLogMock = mRepoLogerMockCreateLog{mock: m}
	m.CreateLogMock.callArgs = []*RepoLogerMockCreateLogParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepoLogerMockCreateLog struct {
	optional           bool
	mock               *RepoLogerMock
	defaultExpectation *RepoLogerMockCreateLogExpectation
	expectations       []*RepoLogerMockCreateLogExpectation

	callArgs []*RepoLogerMockCreateLogParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// RepoLogerMockCreateLogExpectation specifies expectation struct of the RepoLoger.CreateLog
type RepoLogerMockCreateLogExpectation struct {
	mock               *RepoLogerMock
	params             *RepoLogerMockCreateLogParams
	paramPtrs          *RepoLogerMockCreateLogParamPtrs
	expectationOrigins RepoLogerMockCreateLogExpectationOrigins
	results            *RepoLogerMockCreateLogResults
	returnOrigin       string
	Counter            uint64
}

// RepoLogerMockCreateLogParams contains parameters of the RepoLoger.CreateLog
type RepoLogerMockCreateLogParams struct {
	ctx context.Context
	log *model.Log
}

// RepoLogerMockCreateLogParamPtrs contains pointers to parameters of the RepoLoger.CreateLog
type RepoLogerMockCreateLogParamPtrs struct {
	ctx *context.Context
	log **model.Log
}

// RepoLogerMockCreateLogResults contains results of the RepoLoger.CreateLog
type RepoLogerMockCreateLogResults struct {
	err error
}

// RepoLogerMockCreateLogOrigins contains origins of expectations of the RepoLoger.CreateLog
type RepoLogerMockCreateLogExpectationOrigins struct {
	origin    string
	originCtx string
	originLog string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateLog *mRepoLogerMockCreateLog) Optional() *mRepoLogerMockCreateLog {
	mmCreateLog.optional = true
	return mmCreateLog
}

// Expect sets up expected params for RepoLoger.CreateLog
func (mmCreateLog *mRepoLogerMockCreateLog) Expect(ctx context.Context, log *model.Log) *mRepoLogerMockCreateLog {
	if mmCreateLog.mock.funcCreateLog != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Set")
	}

	if mmCreateLog.defaultExpectation == nil {
		mmCreateLog.defaultExpectation = &RepoLogerMockCreateLogExpectation{}
	}

	if mmCreateLog.defaultExpectation.paramPtrs != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by ExpectParams functions")
	}

	mmCreateLog.defaultExpectation.params = &RepoLogerMockCreateLogParams{ctx, log}
	mmCreateLog.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateLog.expectations {
		if minimock.Equal(e.params, mmCreateLog.defaultExpectation.params) {
			mmCreateLog.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateLog.defaultExpectation.params)
		}
	}

	return mmCreateLog
}

// ExpectCtxParam1 sets up expected param ctx for RepoLoger.CreateLog
func (mmCreateLog *mRepoLogerMockCreateLog) ExpectCtxParam1(ctx context.Context) *mRepoLogerMockCreateLog {
	if mmCreateLog.mock.funcCreateLog != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Set")
	}

	if mmCreateLog.defaultExpectation == nil {
		mmCreateLog.defaultExpectation = &RepoLogerMockCreateLogExpectation{}
	}

	if mmCreateLog.defaultExpectation.params != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Expect")
	}

	if mmCreateLog.defaultExpectation.paramPtrs == nil {
		mmCreateLog.defaultExpectation.paramPtrs = &RepoLogerMockCreateLogParamPtrs{}
	}
	mmCreateLog.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateLog.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateLog
}

// ExpectLogParam2 sets up expected param log for RepoLoger.CreateLog
func (mmCreateLog *mRepoLogerMockCreateLog) ExpectLogParam2(log *model.Log) *mRepoLogerMockCreateLog {
	if mmCreateLog.mock.funcCreateLog != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Set")
	}

	if mmCreateLog.defaultExpectation == nil {
		mmCreateLog.defaultExpectation = &RepoLogerMockCreateLogExpectation{}
	}

	if mmCreateLog.defaultExpectation.params != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Expect")
	}

	if mmCreateLog.defaultExpectation.paramPtrs == nil {
		mmCreateLog.defaultExpectation.paramPtrs = &RepoLogerMockCreateLogParamPtrs{}
	}
	mmCreateLog.defaultExpectation.paramPtrs.log = &log
	mmCreateLog.defaultExpectation.expectationOrigins.originLog = minimock.CallerInfo(1)

	return mmCreateLog
}

// Inspect accepts an inspector function that has same arguments as the RepoLoger.CreateLog
func (mmCreateLog *mRepoLogerMockCreateLog) Inspect(f func(ctx context.Context, log *model.Log)) *mRepoLogerMockCreateLog {
	if mmCreateLog.mock.inspectFuncCreateLog != nil {
		mmCreateLog.mock.t.Fatalf("Inspect function is already set for RepoLogerMock.CreateLog")
	}

	mmCreateLog.mock.inspectFuncCreateLog = f

	return mmCreateLog
}

// Return sets up results that will be returned by RepoLoger.CreateLog
func (mmCreateLog *mRepoLogerMockCreateLog) Return(err error) *RepoLogerMock {
	if mmCreateLog.mock.funcCreateLog != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Set")
	}

	if mmCreateLog.defaultExpectation == nil {
		mmCreateLog.defaultExpectation = &RepoLogerMockCreateLogExpectation{mock: mmCreateLog.mock}
	}
	mmCreateLog.defaultExpectation.results = &RepoLogerMockCreateLogResults{err}
	mmCreateLog.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateLog.mock
}

// Set uses given function f to mock the RepoLoger.CreateLog method
func (mmCreateLog *mRepoLogerMockCreateLog) Set(f func(ctx context.Context, log *model.Log) (err error)) *RepoLogerMock {
	if mmCreateLog.defaultExpectation != nil {
		mmCreateLog.mock.t.Fatalf("Default expectation is already set for the RepoLoger.CreateLog method")
	}

	if len(mmCreateLog.expectations) > 0 {
		mmCreateLog.mock.t.Fatalf("Some expectations are already set for the RepoLoger.CreateLog method")
	}

	mmCreateLog.mock.funcCreateLog = f
	mmCreateLog.mock.funcCreateLogOrigin = minimock.CallerInfo(1)
	return mmCreateLog.mock
}

// When sets expectation for the RepoLoger.CreateLog which will trigger the result defined by the following
// Then helper
func (mmCreateLog *mRepoLogerMockCreateLog) When(ctx context.Context, log *model.Log) *RepoLogerMockCreateLogExpectation {
	if mmCreateLog.mock.funcCreateLog != nil {
		mmCreateLog.mock.t.Fatalf("RepoLogerMock.CreateLog mock is already set by Set")
	}

	expectation := &RepoLogerMockCreateLogExpectation{
		mock:               mmCreateLog.mock,
		params:             &RepoLogerMockCreateLogParams{ctx, log},
		expectationOrigins: RepoLogerMockCreateLogExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateLog.expectations = append(mmCreateLog.expectations, expectation)
	return expectation
}

// Then sets up RepoLoger.CreateLog return parameters for the expectation previously defined by the When method
func (e *RepoLogerMockCreateLogExpectation) Then(err error) *RepoLogerMock {
	e.results = &RepoLogerMockCreateLogResults{err}
	return e.mock
}

// Times sets number of times RepoLoger.CreateLog should be invoked
func (mmCreateLog *mRepoLogerMockCreateLog) Times(n uint64) *mRepoLogerMockCreateLog {
	if n == 0 {
		mmCreateLog.mock.t.Fatalf("Times of RepoLogerMock.CreateLog mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateLog.expectedInvocations, n)
	mmCreateLog.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateLog
}

func (mmCreateLog *mRepoLogerMockCreateLog) invocationsDone() bool {
	if len(mmCreateLog.expectations) == 0 && mmCreateLog.defaultExpectation == nil && mmCreateLog.mock.funcCreateLog == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateLog.mock.afterCreateLogCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateLog.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateLog implements mm_repository.RepoLoger
func (mmCreateLog *RepoLogerMock) CreateLog(ctx context.Context, log *model.Log) (err error) {
	mm_atomic.AddUint64(&mmCreateLog.beforeCreateLogCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateLog.afterCreateLogCounter, 1)

	mmCreateLog.t.Helper()

	if mmCreateLog.inspectFuncCreateLog != nil {
		mmCreateLog.inspectFuncCreateLog(ctx, log)
	}

	mm_params := RepoLogerMockCreateLogParams{ctx, log}

	// Record call args
	mmCreateLog.CreateLogMock.mutex.Lock()
	mmCreateLog.CreateLogMock.callArgs = append(mmCreateLog.CreateLogMock.callArgs, &mm_params)
	mmCreateLog.CreateLogMock.mutex.Unlock()

	for _, e := range mmCreateLog.CreateLogMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateLog.CreateLogMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateLog.CreateLogMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateLog.CreateLogMock.defaultExpectation.params
		mm_want_ptrs := mmCreateLog.CreateLogMock.defaultExpectation.paramPtrs

		mm_got := RepoLogerMockCreateLogParams{ctx, log}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateLog.t.Errorf("RepoLogerMock.CreateLog got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateLog.CreateLogMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.log != nil && !minimock.Equal(*mm_want_ptrs.log, mm_got.log) {
				mmCreateLog.t.Errorf("RepoLogerMock.CreateLog got unexpected parameter log, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateLog.CreateLogMock.defaultExpectation.expectationOrigins.originLog, *mm_want_ptrs.log, mm_got.log, minimock.Diff(*mm_want_ptrs.log, mm_got.log))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateLog.t.Errorf("RepoLogerMock.CreateLog got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateLog.CreateLogMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateLog.CreateLogMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateLog.t.Fatal("No results are set for the RepoLogerMock.CreateLog")
		}
		return (*mm_results).err
	}
	if mmCreateLog.funcCreateLog != nil {
		return mmCreateLog.funcCreateLog(ctx, log)
	}
	mmCreateLog.t.Fatalf("Unexpected call to RepoLogerMock.CreateLog. %v %v", ctx, log)
	return
}

// CreateLogAfterCounter returns a count of finished RepoLogerMock.CreateLog invocations
func (mmCreateLog *RepoLogerMock) CreateLogAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateLog.afterCreateLogCounter)
}

// CreateLogBeforeCounter returns a count of RepoLogerMock.CreateLog invocations
func (mmCreateLog *RepoLogerMock) CreateLogBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateLog.beforeCreateLogCounter)
}

// Calls returns a list of arguments used in each call to RepoLogerMock.CreateLog.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateLog *mRepoLogerMockCreateLog) Calls() []*RepoLogerMockCreateLogParams {
	mmCreateLog.mutex.RLock()

	argCopy := make([]*RepoLogerMockCreateLogParams, len(mmCreateLog.callArgs))
	copy(argCopy, mmCreateLog.callArgs)

	mmCreateLog.mutex.RUnlock()

	return argCopy
}

// MinimockCreateLogDone returns true if the count of the CreateLog invocations corresponds
// the number of defined expectations
func (m *RepoLogerMock) MinimockCreateLogDone() bool {
	if m.CreateLogMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateLogMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateLogMock.invocationsDone()
}

// MinimockCreateLogInspect logs each unmet expectation
func (m *RepoLogerMock) MinimockCreateLogInspect() {
	for _, e := range m.CreateLogMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepoLogerMock.CreateLog at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateLogCounter := mm_atomic.LoadUint64(&m.afterCreateLogCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateLogMock.defaultExpectation != nil && afterCreateLogCounter < 1 {
		if m.CreateLogMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to RepoLogerMock.CreateLog at\n%s", m.CreateLogMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to RepoLogerMock.CreateLog at\n%s with params: %#v", m.CreateLogMock.defaultExpectation.expectationOrigins.origin, *m.CreateLogMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateLog != nil && afterCreateLogCounter < 1 {
		m.t.Errorf("Expected call to RepoLogerMock.CreateLog at\n%s", m.funcCreateLogOrigin)
	}

	if !m.CreateLogMock.invocationsDone() && afterCreateLogCounter > 0 {
		m.t.Errorf("Expected %d calls to RepoLogerMock.CreateLog at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateLogMock.expectedInvocations), m.CreateLogMock.expectedInvocationsOrigin, afterCreateLogCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepoLogerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateLogInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepoLogerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepoLogerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateLogDone()
}
