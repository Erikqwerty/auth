name: CI

on:
  push:
    branches: [main, master, dev-task-4 ]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: "cr.selcloud.ru/qwerty"
  IMAGE_NAME: "auth-server"
  CONTAINER_NAME: "auth-server-container"
  DB_CONTAINER_NAME: "auth-db-container"
  DB_IMAGE_NAME: "postgres:13"
  DB_REDIS_CONTAINER_NAME: "auth-cache-redis"

jobs:
  # Go Job - выполняет билд, тесты и линтинг кода
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    runs-on: ubuntu-latest
    needs: build-and-test  # Выполняется после build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: false

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61
          args: --timeout=30m --config=./.golangci.pipeline.yaml

  # CI/CD Job - выполняет сборку и деплой Docker-образа
  image-build-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, linter]  # Выполняется после Go-шагов
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file for CI
        run: |
          echo "PG_DATABASE_NAME=auth" >> .env
          echo "PG_USER=${{ secrets.PG_USER }}" >> .env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env
          echo "PG_PORT=5432" >> .env
          echo "MIGRATION_DIR=./migrations" >> .env
          echo "GRPC_HOST=0.0.0.0" >> .env
          echo "GRPC_PORT=50052" >> .env
          echo "PG_DSN=host=$DB_CONTAINER_NAME port=5432 dbname=auth user=${{secrets.PG_USER}} password=${{secrets.PG_PASSWORD}} sslmode=disable" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f Dockerfile .

      - name: Build and Push Migrator Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx build --no-cache --push --tag $REGISTRY/auth_migrator:$TAG_NAME -f migration.Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push  # Выполняется после успешного image-build-and-push
    steps:
      - name: Login and Set Up Network
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: 33
          script: |
            docker network create auth-service-network || true

      - name: Deploy Authorization Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: 33
          envs: IMAGE_NAME, REGISTRY, GITHUB_SHA, CONTAINER_NAME
          script: |
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d -p 50052:50052 --network auth-service-network --name $CONTAINER_NAME -t $REGISTRY/$IMAGE_NAME:$TAG_NAME

      - name: Ensure Database Container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: 33
          envs: DB_CONTAINER_NAME, DB_IMAGE_NAME
          script: |
            if [ "$(docker ps -q -f name=$DB_CONTAINER_NAME)" ]; then
              echo "Контейнер базы данных уже запущен"
            else
              docker run -d --name $DB_CONTAINER_NAME \
                --network auth-service-network \
                -e POSTGRES_DB=auth \
                -e POSTGRES_USER=${{ secrets.PG_USER }} \
                -e POSTGRES_PASSWORD=${{ secrets.PG_PASSWORD }} \
                -v postgres_data:/var/lib/postgresql/auth_data \
                -p 50062:5432 $DB_IMAGE_NAME
            fi

      - name: Ensure Redis Cache
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: 33
          envs: DB_REDIS_CONTAINER_NAME
          script: |
            if [ "$(docker ps -q -f name=$DB_REDIS_CONTAINER_NAME)" ]; then
              echo "Контейнер кеша redis уже запущен"
            else
              docker run -d --name $DB_REDIS_CONTAINER_NAME \
                --network auth-service-network \
                -v redis_data:/var/lib/redis/auth_data \
                -p 127.0.0.1:56379:6379 redis:7.2.6-alpine
            fi

      - name: Run Migrator
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: 33
          envs: REGISTRY, GITHUB_SHA
          script: |
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            docker stop auth_migrator || echo "Контейнер auth_migrator не запущен"
            docker rm auth_migrator || echo "Контейнер auth_migrator не существует"
            docker run --network auth-service-network --name auth_migrator \
              --env-file .env \
              -e DB_HOST=$DB_CONTAINER_NAME -t $REGISTRY/auth_migrator:$TAG_NAME || echo "Ошибка запуска контейнера миграций"

      - name: Prune Old Images
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: 33
          script: |
            docker image prune -a --filter "until=24h" -f