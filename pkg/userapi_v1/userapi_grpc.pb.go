// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: userapi.proto

package userapi_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserAPIV1Client is the client API for UserAPIV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAPIV1Client interface {
	// Метод для создания нового пользователя
	CreateUser(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Метод для получения данных пользователя
	GetUserInfo(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Метод для обновления данных пользователя
	UpdateUserInfo(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Метод для удаления пользователя
	DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userAPIV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIV1Client(cc grpc.ClientConnInterface) UserAPIV1Client {
	return &userAPIV1Client{cc}
}

func (c *userAPIV1Client) CreateUser(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/userapi_v1.UserAPIV1/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIV1Client) GetUserInfo(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/userapi_v1.UserAPIV1/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIV1Client) UpdateUserInfo(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/userapi_v1.UserAPIV1/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIV1Client) DeleteUser(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/userapi_v1.UserAPIV1/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIV1Server is the server API for UserAPIV1 service.
// All implementations must embed UnimplementedUserAPIV1Server
// for forward compatibility
type UserAPIV1Server interface {
	// Метод для создания нового пользователя
	CreateUser(context.Context, *CreateRequest) (*CreateResponse, error)
	// Метод для получения данных пользователя
	GetUserInfo(context.Context, *GetRequest) (*GetResponse, error)
	// Метод для обновления данных пользователя
	UpdateUserInfo(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	// Метод для удаления пользователя
	DeleteUser(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserAPIV1Server()
}

// UnimplementedUserAPIV1Server must be embedded to have forward compatible implementations.
type UnimplementedUserAPIV1Server struct {
}

func (UnimplementedUserAPIV1Server) CreateUser(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserAPIV1Server) GetUserInfo(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserAPIV1Server) UpdateUserInfo(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserAPIV1Server) DeleteUser(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserAPIV1Server) mustEmbedUnimplementedUserAPIV1Server() {}

// UnsafeUserAPIV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAPIV1Server will
// result in compilation errors.
type UnsafeUserAPIV1Server interface {
	mustEmbedUnimplementedUserAPIV1Server()
}

func RegisterUserAPIV1Server(s grpc.ServiceRegistrar, srv UserAPIV1Server) {
	s.RegisterService(&UserAPIV1_ServiceDesc, srv)
}

func _UserAPIV1_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIV1Server).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userapi_v1.UserAPIV1/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIV1Server).CreateUser(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPIV1_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIV1Server).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userapi_v1.UserAPIV1/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIV1Server).GetUserInfo(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPIV1_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIV1Server).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userapi_v1.UserAPIV1/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIV1Server).UpdateUserInfo(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPIV1_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIV1Server).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userapi_v1.UserAPIV1/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIV1Server).DeleteUser(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAPIV1_ServiceDesc is the grpc.ServiceDesc for UserAPIV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAPIV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userapi_v1.UserAPIV1",
	HandlerType: (*UserAPIV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserAPIV1_CreateUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserAPIV1_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserAPIV1_UpdateUserInfo_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserAPIV1_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userapi.proto",
}
