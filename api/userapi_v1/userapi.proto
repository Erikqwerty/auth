syntax = "proto3";  

package userapi_v1;  

import "google/api/annotations.proto";  
import "google/protobuf/empty.proto";       
import "google/protobuf/timestamp.proto";  
import "google/protobuf/wrappers.proto"; 
import "validate/validate.proto";

option go_package = "github.com/erikqwerty/auth/pkg/userapi_v1;userapi_v1";  

// Определение сервиса UserAPIV1, который содержит 
// основные RPC методы для управления пользователями
service UserAPIV1 {
  // Метод для создания нового пользователя
  rpc CreateUser(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/auth/v1/create"
      body: "*"
    };
  }

  // Метод для получения данных пользователя
  rpc GetUserInfo(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/auth/v1"
    };
  }

  // Метод для обновления данных пользователя
  rpc UpdateUserInfo(UpdateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/auth/v1"
      body: "*"
    };
  }

  // Метод для удаления пользователя
  rpc DeleteUser(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/auth/v1"
    };
  }
}

// Role - перечисление ролей пользователя
enum Role {
  ROLE_UNSPECIFIED = 0; // Не указана (по умолчанию)
  ROLE_USER = 1;        // Обычный пользователь
  ROLE_ADMIN = 2;       // Администратор
}

// Сообщение запроса для метода Create (создание пользователя)
message CreateRequest {
  // Имя пользователя
  string name = 1 [(validate.rules).string.min_len = 1];              
  // Email пользователя (уникальный для аутентификации)
  string email = 2 [(validate.rules).string.email = true];     
  // Пароль пользователя
  string password = 3 [(validate.rules).string.min_len = 4];
  // Подтверждение пароля           
  string password_confirm = 4 [(validate.rules).string.min_len = 4];  
  // Роль пользователя (USER или ADMIN)
  Role role = 5 [(validate.rules).enum.defined_only = true];             
}

// Сообщение ответа для метода Create (создание пользователя)
message CreateResponse {
  int64 id = 1;  // Уникальный идентификатор созданного пользователя
}

// Сообщение запроса для метода Get (получение данных пользователя)
message GetRequest {
  // email пользователя, данные которого нужно получить
  string email = 1 [(validate.rules).string.email = true];  
}

// Сообщение ответа для метода Get (получение данных пользователя)
message GetResponse {
  int64 id = 1;                       // Уникальный идентификатор пользователя
  string name = 2;                    // Имя пользователя
  string email = 3;                   // Email пользователя
  Role role = 4;                      // Роль пользователя (USER или ADMIN)

  // Дата и время создания пользователя
  google.protobuf.Timestamp created_at = 5; 
  // Дата и время последнего обновления пользователя
  google.protobuf.Timestamp updated_at = 6; 
}

// Сообщение запроса для метода Update (обновление данных пользователя)
message UpdateRequest {
  // Идентификатор пользователя, данные которого нужно обновить
  string email = 1 [(validate.rules).string.email = true];
  // Имя пользователя (обновляется при необходимости)                     
  google.protobuf.StringValue name = 2 [(validate.rules).string.min_len = 1]; 
  // Роль пользователя (USER или ADMIN)
  Role role = 4 [(validate.rules).enum.defined_only = true];                    
}

// Сообщение запроса для метода Delete (удаление пользователя)
message DeleteRequest {
  // Идентификатор пользователя, которого нужно удалить
  int64 id = 1 [(validate.rules).int64.gt = 0]; 
}